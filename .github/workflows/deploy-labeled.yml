name: Deploy to Labeled Runners

on:
  push:
    branches: [ main, master ]
    paths:
      - '**/docker-compose.yml'
      - '**/docker-compose.yaml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development

env:
  DEPLOY_PATH: /opt/docker

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      n8n: ${{ steps.changes.outputs.n8n }}
      nextcloud: ${{ steps.changes.outputs.nextcloud }}
      sonarqube: ${{ steps.changes.outputs.sonarqube }}
      wiki: ${{ steps.changes.outputs.wiki }}
      changed-services: ${{ steps.list-changes.outputs.services }}
      target-env: ${{ steps.set-env.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set target environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=production" >> $GITHUB_OUTPUT
          fi
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            n8n:
              - 'n8n/**'
            nextcloud:
              - 'nextcloud/**'
            sonarqube:
              - 'sonarqube/**'
            wiki:
              - 'wiki/**'
      
      - name: List changed services
        id: list-changes
        run: |
          services=""
          if [ "${{ steps.changes.outputs.n8n }}" == "true" ]; then
            services="$services n8n"
          fi
          if [ "${{ steps.changes.outputs.nextcloud }}" == "true" ]; then
            services="$services nextcloud"
          fi
          if [ "${{ steps.changes.outputs.sonarqube }}" == "true" ]; then
            services="$services sonarqube"
          fi
          if [ "${{ steps.changes.outputs.wiki }}" == "true" ]; then
            services="$services wiki"
          fi
          echo "services=$services" >> $GITHUB_OUTPUT
          echo "Changed services: $services"
          echo "Target environment: ${{ steps.set-env.outputs.environment }}"

  deploy-to-environment:
    needs: detect-changes
    if: needs.detect-changes.outputs.changed-services != ''
    runs-on: [self-hosted, '${{ needs.detect-changes.outputs.target-env }}']
    environment: ${{ needs.detect-changes.outputs.target-env }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Show environment info
        run: |
          echo "🌍 Deploying to: ${{ needs.detect-changes.outputs.target-env }}"
          echo "🚀 Services to deploy: ${{ needs.detect-changes.outputs.changed-services }}"
          echo "💾 Deploy path: ${{ env.DEPLOY_PATH }}"
          echo "🏗️ Runner labels: self-hosted, ${{ needs.detect-changes.outputs.target-env }}"
      
      - name: Setup deployment directory
        run: |
          mkdir -p ${{ env.DEPLOY_PATH }}
          echo "📁 Deployment directory: ${{ env.DEPLOY_PATH }}"
      
      - name: Pre-deployment backup
        run: |
          BACKUP_DIR="${{ env.DEPLOY_PATH }}/backups/$(date +%Y%m%d_%H%M%S)"
          mkdir -p "$BACKUP_DIR"
          
          for service in ${{ needs.detect-changes.outputs.changed-services }}; do
            if [ -d "${{ env.DEPLOY_PATH }}/$service" ]; then
              echo "💾 Backing up $service configuration..."
              cp -r "${{ env.DEPLOY_PATH }}/$service" "$BACKUP_DIR/"
            fi
          done
          
          echo "✅ Backup completed: $BACKUP_DIR"
      
      - name: Deploy changed services
        run: |
          for service in ${{ needs.detect-changes.outputs.changed-services }}; do
            echo ""
            echo "🚀 Deploying $service to ${{ needs.detect-changes.outputs.target-env }}..."
            
            # Copy service files to deployment path
            cp -r $service/ ${{ env.DEPLOY_PATH }}/
            cd ${{ env.DEPLOY_PATH }}/$service
            
            echo "📋 Current containers for $service:"
            docker compose ps || true
            
            echo "🔄 Stopping $service..."
            docker compose down || true
            
            echo "📥 Pulling latest images for $service..."
            docker compose pull
            
            echo "🚀 Starting $service..."
            docker compose up -d
            
            echo "✅ $service deployment completed"
            docker compose ps
            
            cd - > /dev/null
          done
      
      - name: Health Check with retry
        run: |
          for service in ${{ needs.detect-changes.outputs.changed-services }}; do
            echo "🔍 Health checking $service..."
            cd ${{ env.DEPLOY_PATH }}/$service
            
            # Retry health check up to 3 times
            for attempt in 1 2 3; do
              echo "⏳ Health check attempt $attempt/3 for $service..."
              sleep 10
              
              if docker compose ps | grep -q "Up"; then
                echo "✅ $service is healthy"
                break
              elif [ $attempt -eq 3 ]; then
                echo "❌ $service failed health check after 3 attempts"
                echo "📋 Container logs:"
                docker compose logs --tail=50
                exit 1
              else
                echo "⚠️ Attempt $attempt failed, retrying..."
              fi
            done
            
            cd - > /dev/null
          done
      
      - name: Post-deployment cleanup
        if: success()
        run: |
          echo "🧹 Post-deployment cleanup..."
          
          # Clean up old Docker images
          docker image prune -f
          
          # Clean up old backups (keep last 5)
          find ${{ env.DEPLOY_PATH }}/backups -maxdepth 1 -type d -name "20*" | sort -r | tail -n +6 | xargs rm -rf
          
          echo "✅ Cleanup completed"
      
      - name: Rollback on failure
        if: failure()
        run: |
          echo "🔄 Rolling back failed deployment..."
          
          LATEST_BACKUP=$(find ${{ env.DEPLOY_PATH }}/backups -maxdepth 1 -type d -name "20*" | sort -r | head -n 1)
          
          if [ -n "$LATEST_BACKUP" ]; then
            for service in ${{ needs.detect-changes.outputs.changed-services }}; do
              if [ -d "$LATEST_BACKUP/$service" ]; then
                echo "🔄 Restoring $service from backup..."
                cp -r "$LATEST_BACKUP/$service" ${{ env.DEPLOY_PATH }}/
                cd ${{ env.DEPLOY_PATH }}/$service
                docker compose down || true
                docker compose up -d
                cd - > /dev/null
              fi
            done
            echo "✅ Rollback completed"
          else
            echo "⚠️ No backup found for rollback"
          fi

  deployment-summary:
    needs: [detect-changes, deploy-to-environment]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate deployment report
        run: |
          if [ "${{ needs.deploy-to-environment.result }}" == "success" ]; then
            echo "## ✅ Deployment Successful 🎉" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Environment:** ${{ needs.detect-changes.outputs.target-env }}" >> $GITHUB_STEP_SUMMARY
            echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Deployed Services:**" >> $GITHUB_STEP_SUMMARY
            for service in ${{ needs.detect-changes.outputs.changed-services }}; do
              echo "- 🚀 **$service**" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Environment:** ${{ needs.detect-changes.outputs.target-env }}" >> $GITHUB_STEP_SUMMARY
            echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Failed Services:**" >> $GITHUB_STEP_SUMMARY
            for service in ${{ needs.detect-changes.outputs.changed-services }}; do
              echo "- ⚠️ **$service**" >> $GITHUB_STEP_SUMMARY
            done
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Automatic rollback was attempted. Check the logs for details." >> $GITHUB_STEP_SUMMARY
          fi
